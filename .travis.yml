language: c

compiler:
  - gcc

git:
  depth: 1

osx_image: xcode11.4

os: linux
dist: bionic

jobs:
  include:
    # Linux
    - env: TARGET=arm-unknown-linux-gnueabi
    - env: TARGET=armv7-unknown-linux-gnueabihf
    - env: TARGET=i686-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu

    # OSX
    - env: TARGET=i686-apple-darwin
      os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu
      os: windows

before_script:
  # Linux Dependencies
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]];
    then
      sudo add-apt-repository ppa:deadsnakes/ppa -y;
      sudo add-apt-repository ppa:duggan/bats -y;

      sudo apt install bats valgrind python2.{3..7} python3.{3..8} -y;

      autoreconf --install;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
      brew install python || brew upgrade python;
      brew install python@3.8            || true;
      brew install bats-core;
      brew install --HEAD valgrind       || true;
      brew cask install anaconda         || true;
    fi

script:
  - echo $TRAVIS_OS_NAME -- $TARGET

  - if [[ "$TRAVIS_OS_NAME" == "linux"   ]];
    then
      ./configure &&
      make &&
      sudo make check;
    fi
  
  - if [[ "$TRAVIS_OS_NAME" == "osx"     ]];
    then
      gcc -s -Wall -O3 -o src/austin src/*.c &&
      sudo bats test/macos/test.bats;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]];
    then
      gcc -s -Wall -O3 -o src/austin src/*.c -lpsapi;
    fi

after_success:
  ./src/austin --usage

after_failure:
  - if [[ "$TRAVIS_OS_NAME" == "linux"   ]];
    then
      test -f /var/log/syslog.log && cat /var/log/syslog.log | grep austin; 
      test -f test-suite.log      && cat test-suite.log;
    fi

before_deploy:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];
    then
      SED_FLAGS="-n -E";
    else
      SED_FLAGS="-r -n";
    fi;
    export VERSION=$(cat src/austin.h | sed $SED_FLAGS "s/.*VERSION[ ]+\"(.+)\"/\1/p");

  - export TRAVIS_TAG=v$VERSION

  - echo "==== Preparing to create GitHub Release for version $VERSION ===="

  - if [[ "$TRAVIS_OS_NAME" == "linux"   ]];
    then
      export ZIP_CMD="tar -Jcf";
      export ZIP_SUFFIX="linux-${TARGET%%-*}.tar.xz";
      export AUSTIN_EXE=austin;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "osx"     ]];
    then
      export ZIP_CMD="zip -r";
      export ZIP_SUFFIX="mac-${TARGET%%-*}.zip";
      export AUSTIN_EXE=austin;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]];
    then
      export ZIP_CMD="7z a -tzip";
      export ZIP_SUFFIX="win-${TARGET%%-*}.zip";
      export AUSTIN_EXE=austin.exe;
    fi

  - export ARTEFACT="austin-${VERSION}-${ZIP_SUFFIX}"

  - echo " - Using command $ZIP_CMD to create artefact $ARTEFACT"

  - cd src
  - $ZIP_CMD $ARTEFACT $AUSTIN_EXE
  - echo " - Generated artefact" $(ls $ARTEFACT)

  - git config --local user.name "Gabriele N. Tornetta"
  - git config --local user.email ${GITHUB_EMAIL}
  - git tag -a -f -m "Release $VERSION" $TRAVIS_TAG

deploy:
  provider: releases
  edge: true
  token: $GITHUB_TOKEN
  file: $ARTEFACT
  overwrite: true
